-- --------------------Basic Selects----------------------------------------------

use hamrobazarecommerce;

/*i. Simple one:
The goal of this query is to select all columns and rows from the customer table.
*/

SELECT * FROM `customer`;

/* 
ii. With Order by:
The goal of this query is to select all columns and rows from the product table and order the results by the cost column in descending order.
*/

SELECT * FROM `product` ORDER BY cost DESC;

/* 
iii. Use of Distinct (ensure your data as info that may result in duplicates):
The goal of this query is to select distinct values of the product_categoryId column from the product table. This is useful when there are duplicate values in the column and you want to see only unique values. We can find the types of categories of product that are in the system.
*/

SELECT DISTINCT product_categoryId FROM `product`;


/*
iv. AND  in Where clause:

The goal of this query is to select all columns and rows from the product table where the cost of product is greater than 100 and product category is shoes
*/

SELECT * FROM `product` WHERE cost > 100 AND product_categoryId = 1;

/*
iv. OR  in Where clause:

The goal of this query is to select all columns and rows from the product table where the cost of product is greater than 100 or product category is clothing
*/

SELECT * FROM `product` WHERE cost > 100 OR product_categoryId = 2;


/*
v. Use of IN:

The goal of this query is to select all columns and rows from the product table where the product_categoryId is either 1, 2, or 3. This demonstrates the use of the IN operator to filter results based on a list of possible values.
 */
 
SELECT * FROM `product` WHERE product_categoryId IN (1,2);

/*
vi. Use of Like:
The goal of this query is to select all columns and rows from the customer table where the firstname starts with the letter 'J'. This demonstrates the use of the LIKE operator with the wildcard character '%' to filter results based on a pattern match.
*/

SELECT * FROM `customer` WHERE firstname LIKE 'J%';





-- -------------------Aggregate functions-----------------
/*
1. COUNT - counts the number of rows that match a specified condition
This query returns the total number of rows in the customer table.
*/
SELECT COUNT(*) as 'Total Customers' FROM `customer`;

/*
2. SUM - calculates the sum of a numeric column
This query returns the sum of the total_amount column in the order table - which is the total order made to this date.
*/
SELECT SUM(total_amount) as 'Total Order Amount' FROM `order`;

/*
3. AVG - calculates the average of a numeric column
This query returns the average price of all the products in the product table.
*/
SELECT AVG(cost) 'Average Product Price' FROM `product`;



-- ----------------- Join -----------

/*
i. Self join:
We have an admin table that contains admin information including the manager id for each admin. We can use self join to find the names of admin and their managers. 
*/

SELECT e1.name AS admin, e2.name AS manager
FROM `admin` e1
JOIN `admin` e2 ON e1.managerId = e2.adminId;


/*
ii. Inner join:
We have a customer table and an order table, where the customer table has a customerId field that corresponds to the customerId field in the order table. We can use inner join to combine the two tables and find the customers who have placed orders.
*/
SELECT  CONCAT(firstname, ' ', COALESCE(middlename, ''), ' ', lastname) AS customer_name, o.order_date, o.total_amount
FROM `customer` c
JOIN `order` o ON c.customerId = o.customerId;

/*
iii. Outer join:

We have a product table and an order_item table, where the product table has a productId field that corresponds to the productId field in the order_item table. We can use outer join to combine the two tables and find all the products, even if they haven't been ordered yet. The query will look something like this:
*/

SELECT p.product_name, IFNULL(Sum(oi.quantity), 0) 'Quantiy ordered'
FROM `product` p
LEFT OUTER JOIN `order_item` oi ON p.productId = oi.productId
GROUP By p.product_name;



-- ------------ Group By with Having ---------

SELECT p.product_name, IFNULL(Sum(oi.quantity), 0) 'Quantiy ordered'
FROM `product` p
LEFT OUTER JOIN `order_item` oi ON p.productId = oi.productId
GROUP By p.product_name
Having IFNULL(Sum(oi.quantity), 0) > 1;


-- ------------Views -----------
/*
- View to show customers who have placed orders in the last 30 days:
*/

CREATE OR REPLACE VIEW `recent_customers` AS
SELECT DISTINCT c.customerId, c.firstname, c.lastname, o.order_date
FROM `customer` c
JOIN `order` o ON c.customerId = o.customerId
WHERE o.order_date >= DATE_SUB(NOW(), INTERVAL 30 DAY)
ORDER BY o.order_date DESC;

/*
- View to show the total revenue generated by each product category:
*/

CREATE OR REPLACE VIEW `category_revenue` AS
SELECT pc.name AS category, SUM(oi.price * oi.quantity) AS total_revenue
FROM `order_item` oi
JOIN `product` p ON oi.productId = p.productId
JOIN `product_category` pc ON p.product_categoryId = pc.id
GROUP BY pc.name;

/*
- View to show orders with their corresponding order items and customer information:
*/
CREATE OR REPLACE VIEW `order_details` AS
SELECT o.orderId, o.customerId, c.firstname, c.lastname, oi.productId, p.product_name, oi.quantity, oi.price, o.total_amount, o.status
FROM `order` o
JOIN `customer` c ON o.customerId = c.customerId
JOIN `order_item` oi ON o.orderId = oi.orderId
JOIN `product` p ON oi.productId = p.productId;




-- -- Trigger ------------------

/*
The trigger is set to update the total_amount field in the order table after a new record is inserted into the order_item table, by calculating the sum of price multiplied by quantity for all order items belonging to the same order.
*/

DROP TRIGGER IF EXISTS `hamrobazarecommerce`.`order_item_AFTER_INSERT`;

DELIMITER $$
USE `hamrobazarecommerce`$$
CREATE DEFINER= CURRENT_USER TRIGGER `order_item_AFTER_INSERT` AFTER INSERT ON `order_item`
FOR EACH ROW 
 BEGIN
    UPDATE `order`
    SET `total_amount` = (SELECT SUM(`price` * `quantity`) FROM `order_item` WHERE `orderId` = NEW.`orderId`)
    WHERE `orderId` = NEW.`orderId`;
END$$
DELIMITER ;




/*
This trigger is created in the customer table and is set to execute before inserting a new row. It checks if the middlename field of the new row is NULL and sets it to an empty string if so. This ensures that the middlename field always has a value, even if the user does not enter one.
*/
DROP TRIGGER IF EXISTS `hamrobazarecommerce`.`customer_BEFORE_INSERT`;

DELIMITER $$
USE `hamrobazarecommerce`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ecommerce_project`.`customer_BEFORE_INSERT` BEFORE INSERT ON `customer` FOR EACH ROW
BEGIN
IF NEW.middlename IS NULL THEN
        SET NEW.middlename = '';
    END IF;
END$$
DELIMITER ;


/*
The trigger is set to update the total_amount field in the order table after a new record is deleted from the order_item table, by calculating the sum of price multiplied by quantity for all order items belonging to the same order. Order Item is deleted when customer returns the order successfully.
*/

DROP TRIGGER IF EXISTS `hamrobazarecommerce`.`order_item_AFTER_DELETE`;

DELIMITER $$
USE `hamrobazarecommerce`$$
CREATE DEFINER = CURRENT_USER TRIGGER `ecommerce_project`.`order_item_AFTER_DELETE` AFTER DELETE ON `order_item` FOR EACH ROW
BEGIN
UPDATE `order`
    SET `total_amount` = (SELECT SUM(`price` * `quantity`) FROM `order_item` WHERE `orderId` = OLD.`orderId`)
    WHERE `orderId` = OLD.`orderId`;
END$$
DELIMITER ;
